
https://leetcode.com/problems/all-the-matches-of-the-league/ 

Input: 
Teams table:
+-------------+
| team_name   |
+-------------+
| Leetcode FC |
| Ahly SC     |
| Real Madrid |
+-------------+
Output: 
+-------------+-------------+
| home_team   | away_team   |
+-------------+-------------+
| Real Madrid | Leetcode FC |
| Real Madrid | Ahly SC     |
| Leetcode FC | Real Madrid |
| Leetcode FC | Ahly SC     |
| Ahly SC     | Real Madrid |
| Ahly SC     | Leetcode FC |
+-------------+-------------+
Explanation: All the matches of the league are shown in the table.


Cross join revision 

Cross Join does not allow ON condition 

Select t1.team_name AS home_team  , t2.team_name AS away_team 
FROM Teams t1
CROSS JOIN Teams t2
Where t1.team_name != t2.team_name;




Write a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).

The result format is in the following example.

 

Example 1:

Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+


My attempt :- 

SELECT DISTINCT(e.salary) FROM Employee e
ORDER BY e.salary DESC
OFFSET N - 1 LIMIT 1;

DENSE_RANK() WINDOW FUNCTION ( new learning) ----> this function gives same rank to duplicate values 

SELECT e.id , e.salary , DENSE_RANK() OVER( ORDER BY e.salary DESC ) AS rank 
FROM Employee e;


ROW_NUMBER() Window Function (new learning ) ----> this function gives unique rank to each row 

SELECT e.id , e.salary , ROW_NUMBER() OVER (ORDER BY e.salary DESC ) AS rank
FROM Employee e ;






